{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","alert","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"uJAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,+BACGH,EAAKI,QACN,wBAAQC,QAASJ,EAAjB,SAAoCC,Q,gBCPpCI,EAAU,qDAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAa9B,EAVA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCoE9BK,EA/EH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,iBAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAMAC,qBAAU,WACRC,IAAqBhB,MAAK,SAACiB,GACzBP,EAASO,QAEV,IAEH,IAoCMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAC5B,GAAD,OAA6B,IAAnBA,EAAKG,aAEhC,OACE,gCACE,uCACA,8BACE,yBAAQE,QAAS,kBAAMkB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAC7B,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBArDD,SAACa,GAC1B,IAAMd,EAAOkB,EAAMY,MAAK,SAACC,GAAD,OAAOA,EAAEjB,KAAOA,KAClCkB,EAAW,2BAAQhC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACUX,EAAIkB,GACXvB,MAAK,SAACwB,GACLd,EAASD,EAAMW,KAAI,SAAC7B,GAAD,OAAWA,EAAKc,KAAOA,EAAKd,EAAOiC,SAEvDC,OAAM,SAACC,GACNC,MAAM,aAAD,OAAcpC,EAAKI,QAAnB,sCACLe,EAASD,EAAMU,QAAO,SAACG,GAAD,OAAOA,EAAEjB,KAAOA,SA0CVuB,CAAmBrC,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAMwB,SAvCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBrC,QAASgB,EACTsB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,IAG7BrB,EAAmBgB,GAAYhC,MAAK,SAACwB,GACnCd,EAASD,EAAM6B,OAAOd,IACtBZ,EAAW,QA6BX,UACE,uBAAO2B,MAAO5B,EAAS6B,SA1BJ,SAACV,GACxBlB,EAAWkB,EAAMW,OAAOF,UA0BpB,wBAAQG,KAAK,SAAb,yBC3ERC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.37937f6b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\nconst baseUrl = \"https://polar-garden-34190.herokuapp.com/api/notes\";\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note...\");\n  const [showAll, setShowAll] = useState(true);\n\n  /**\n   * This is saying useEffect so on intial render, noteService.getAll = axios.get($notesurl) and\n   * return response.data, then we take the response and setNotes to the value\n   */\n  useEffect(() => {\n    noteService.getAll().then((initialNotes) => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((error) => {\n        alert(`the note '${note.content}' was already deleted from server`);\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n\n  // Alternative would be just to refetch the data as shown below\n  // noteService.getAll().then((updatedNotes) => setNotes(updatedNotes));\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService.create(noteObject).then((returnedNote) => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote(\"\");\n    });\n  };\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter((note) => note.important === true);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  );\n};\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}